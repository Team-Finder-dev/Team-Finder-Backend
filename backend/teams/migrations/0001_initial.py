# Generated by Django 4.2 on 2024-03-25 00:11

import api.validators
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='EntityBaseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('registration_phone_number', models.CharField(help_text='+7-911-123-45-67', max_length=50, unique=True, validators=[api.validators.validate_phone_number], verbose_name='Телефон')),
                ('first_name', models.CharField(help_text='Введите имя', max_length=50, verbose_name='Имя')),
                ('last_name', models.CharField(help_text='Введите фамилию', max_length=50, verbose_name='Фамилия')),
                ('father_name', models.CharField(blank=True, help_text='Введите отчество', max_length=50, verbose_name='Отчество')),
                ('photo', models.ImageField(blank=True, help_text='Загрузите фото', upload_to='media/', verbose_name='Фото')),
                ('statistics', models.URLField(blank=True, help_text='Введите ссылку на статистику', max_length=254, verbose_name='Статистика')),
                ('academy', models.CharField(blank=True, help_text='Введите название команды или академии', max_length=50, verbose_name='Название команды или академии')),
            ],
            options={
                'verbose_name': '%(class)s',
                'verbose_name_plural': '%(class)ss',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Город')),
            ],
            options={
                'verbose_name': 'City',
                'verbose_name_plural': 'Cities',
            },
        ),
        migrations.CreateModel(
            name='Format',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10, validators=[api.validators.validate_format], verbose_name='Игровой формат')),
            ],
            options={
                'verbose_name': 'Format',
                'verbose_name_plural': 'Formats',
            },
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Статус')),
            ],
            options={
                'verbose_name': 'Level',
                'verbose_name_plural': 'Levels',
            },
        ),
        migrations.CreateModel(
            name='ManagerPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Выберите позицию', max_length=50, verbose_name='Позиция')),
            ],
            options={
                'verbose_name': 'Position',
                'verbose_name_plural': 'Positions',
            },
        ),
        migrations.CreateModel(
            name='Messanger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Способ связи', max_length=10, verbose_name='Способ связи')),
                ('logo', models.ImageField(blank=True, help_text='Загрузите логотип', upload_to='media/', verbose_name='Логотип')),
            ],
            options={
                'verbose_name': 'Messanger',
                'verbose_name_plural': 'Messangers',
            },
        ),
        migrations.CreateModel(
            name='Sex',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Пол')),
            ],
            options={
                'verbose_name': 'Sex',
                'verbose_name_plural': 'Sexes',
            },
        ),
        migrations.CreateModel(
            name='Sport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Вид спорта')),
            ],
            options={
                'verbose_name': 'Sport',
                'verbose_name_plural': 'Sports',
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=254, verbose_name='Название команды')),
            ],
            options={
                'verbose_name': 'Tournament',
                'verbose_name_plural': 'Tournaments',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('entitybasemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('name', models.CharField(max_length=50, verbose_name='Название команды')),
                ('manager', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teams', to='teams.managerposition')),
                ('tournament', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teams', to='teams.tournament')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('teams.entitybasemodel',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ContactDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('main_contact', models.BooleanField(default=False, help_text='Передочтительный способ связи', verbose_name='Передочтительный способ связи')),
                ('contact', models.CharField(help_text='Введите ваши контактные данные', max_length=50, verbose_name='Контактные данные')),
                ('messanger', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contact_details', to='teams.messanger')),
            ],
            options={
                'verbose_name': 'ContactDetail',
                'verbose_name_plural': 'ContactDetails',
            },
        ),
        migrations.AddField(
            model_name='entitybasemodel',
            name='city',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)ss', to='teams.city'),
        ),
        migrations.AddField(
            model_name='entitybasemodel',
            name='format',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)ss', to='teams.format'),
        ),
        migrations.AddField(
            model_name='entitybasemodel',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='entitybasemodel',
            name='level',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)ss', to='teams.level'),
        ),
        migrations.AddField(
            model_name='entitybasemodel',
            name='sex',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)ss', to='teams.sex'),
        ),
        migrations.AddField(
            model_name='entitybasemodel',
            name='sport',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)ss', to='teams.sport'),
        ),
        migrations.AddField(
            model_name='entitybasemodel',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='TeamContactDetails',
            fields=[
                ('contactdetails_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='teams.contactdetails')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contact_details', to='teams.team', verbose_name='Контактные данные')),
            ],
            bases=('teams.contactdetails',),
        ),
    ]
